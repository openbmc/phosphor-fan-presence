{
  "comments": [
    {
      "key": {
        "uuid": "def7745b_30cb613e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "Looks like something caused this to not get line-breaked correctly.",
      "range": {
        "startLine": 20,
        "startChar": 64,
        "endLine": 20,
        "endChar": 74
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64995884_e23b3f4b",
        "filename": "monitor/fan.cpp",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "So the sequence I\u0027m thinking of is for setting the fan inventory\u0027s functional state from a genesis BMC state. At genesis BMC state, inventory would not exist for this fan yet, so we\u0027d want to create it in inventory. That means, there should also be an `updateInventory(true)` when the count of nonfunc sensors are below the configured number of sensors failed for nonfunc.\n\nSo really, this could be updated to be:\n\n  updateInventory((countNonFunctionalSensors() \u003c _numSensorFailsForNonFunc));\n\nThis should cover setting the fan\u0027s state in inventory on genesis BMC state and any point after that.",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 92,
        "endChar": 5
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c500673_06f8882e",
        "filename": "monitor/tach_sensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "It appears `getServiceRaw` method is not actually needed and `getService` can just be used instead here for checking if the inventory manager service is running prior to attempting to get the fan sensor\u0027s last known functional state from inventory (if it exists).\n\nWe really just needed to separate getting the service name and getting the property to handle a genesis BMC state.",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 87,
        "endChar": 78
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27abb625_bb190e34",
        "filename": "monitor/tach_sensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "Since you have the service name now, you can eliminate the service name lookup that this `getProperty` function does and call the `getProperty` function that takes the service name as an arg.\n\nhttps://github.com/openbmc/phosphor-fan-presence/blob/master/sdbusplus.hpp#L357-L377",
      "range": {
        "startLine": 93,
        "startChar": 26,
        "endLine": 93,
        "endChar": 54
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "376a1baf_7fd02ea5",
        "filename": "monitor/tach_sensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "I had a side discussion on this, and it was decided that when the inventory service is not up, this should default to _functional \u003d true and attempt to update inventory. So updating this to:\n\n_functional \u003d true;\nupdateInventory(_functional);\n\nwould expose that the inventory manager service isnt available and we attempted to set a fan sensor\u0027s functional state to true causing the fan monitor service to fail since having inventory manager started is a dependency.",
      "range": {
        "startLine": 99,
        "startChar": 12,
        "endLine": 99,
        "endChar": 32
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "799468b6_e2c7a670",
        "filename": "monitor/tach_sensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 104,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "I dont think we want to log an error here, we should log it as \u003clevel::DEBUG\u003e since this exception will happen on the genesis BMC state where the fan sensor doesnt exist in inventory yet.\n\nfwiw, the `phosphor::logging::` namespace isnt needed.",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 72
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e70b247e_29d57769",
        "filename": "monitor/tach_sensor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-06-08T19:49:40Z",
      "side": 1,
      "message": "Same for here, I had a discussion on this and for the case that its the genesis poweron (where fan inventory has not been added yet), this should default to _functional \u003d true and then update inventory. So updating this to:\n\n_functional \u003d true;\nupdateInventory(_functional);\n\nwould set the genesis state of this fan sensor\u0027s functional state to true since we did not retrieve it from inventory.",
      "range": {
        "startLine": 105,
        "startChar": 8,
        "endLine": 105,
        "endChar": 28
      },
      "revId": "966efa405fb1853fa1b79ce84be80428c0dc4b59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}