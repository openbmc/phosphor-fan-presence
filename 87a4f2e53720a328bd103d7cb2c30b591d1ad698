{
  "comments": [
    {
      "key": {
        "uuid": "5398401d_531c56ac",
        "filename": "control/json/manager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 555,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-10-29T18:15:00Z",
      "side": 1,
      "message": "Should consider logging atleast a DEBUG msg to the journal that we failed to get a particular property? Though this could fill up the DEBUG journal quick depending on the interval of the timer, so I can be convinced to not log anything here.",
      "range": {
        "startLine": 554,
        "startChar": 8,
        "endLine": 555,
        "endChar": 10
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "decb389a_16c95f6a",
        "filename": "control/json/manager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 555,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-10-29T18:58:23Z",
      "side": 1,
      "message": "I could be convinced to go either way here as well.  At one point I think we talked  about maybe making an action to remove objects from the cache if the owner was lost, so we could look in the cache when debugging to see if it was there or not.\n\nI guess also maybe we could just remove the item from the objects cache here in this exception path as well.",
      "parentUuid": "5398401d_531c56ac",
      "range": {
        "startLine": 554,
        "startChar": 8,
        "endLine": 555,
        "endChar": 10
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a862981_d426770f",
        "filename": "control/json/manager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 555,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-10-29T20:20:29Z",
      "side": 1,
      "message": "Yeah, we definitely dont want stale data left in the cache if we\u0027re unable to get to it when the timer expires. So I\u0027d say lets atleast erase it from the cache here if we\u0027re not able to retrieve it at this point.",
      "parentUuid": "decb389a_16c95f6a",
      "range": {
        "startLine": 554,
        "startChar": 8,
        "endLine": 555,
        "endChar": 10
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d63d2b5b_f9cc4d50",
        "filename": "control/json/triggers/timer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-10-29T18:15:00Z",
      "side": 1,
      "message": "std::cref(groups)\n\nAfter we talked, it seems instead of sending the preload bool we could make the TimerPkg with std::cref(groups) when preload \u003d\u003d true or pass down `const std::vector\u003cGroup\u003e emptyGroups;` when preload \u003d\u003d false.\n\nstd::cref would create a copy constructable reference_wrapper around emptyGroups.\n\ni.e.)\n```\nif (preload)\n{\n    auto tpPtr \u003d std::make_unique\u003cTimerPkg\u003e(eventName, std::ref(actions), std::cref(groups));\n    mgr-\u003eaddTimer(type, interval, std::move(tpPtr));\n}\nelse\n{\n    const std::vector\u003cGroup\u003e emptyGroups;\n    auto tpPtr \u003d std::make_unique\u003cTimerPkg\u003e(eventName, std::ref(actions), std::cref(emptyGroups));\n    mgr-\u003eaddTimer(type, interval, std::move(tpPtr));\n}\n```\nThis compiles, but I have not tested it..",
      "range": {
        "startLine": 98,
        "startChar": 48,
        "endLine": 98,
        "endChar": 64
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff519701_125d53af",
        "filename": "control/json/triggers/timer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-10-29T18:18:31Z",
      "side": 1,
      "message": "In fact, I\u0027m wondering if this would remove any scope concerns\n```\nelse\n{\n    auto tpPtr \u003d std::make_unique\u003cTimerPkg\u003e(eventName, std::ref(actions), std::vector\u003cGroup\u003e());\n    mgr-\u003eaddTimer(type, interval, std::move(tpPtr));\n}",
      "parentUuid": "d63d2b5b_f9cc4d50",
      "range": {
        "startLine": 98,
        "startChar": 48,
        "endLine": 98,
        "endChar": 64
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37e2e980_a23d751c",
        "filename": "control/json/triggers/timer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-10-29T18:58:23Z",
      "side": 1,
      "message": "If that tuple entry is a reference, I would think using\n  const std::vector\u003cGroup\u003e emptyGroups;\nwould end up with a dangling reference for sure.\n\nAlso, I\u0027m not sure how you\u0027re latest example would help?  That too just seems like a temporary in the current  scope.\n\nNow if the tuple didn\u0027t take a reference, that is another story.",
      "parentUuid": "ff519701_125d53af",
      "range": {
        "startLine": 98,
        "startChar": 48,
        "endLine": 98,
        "endChar": 64
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e67fe6a5_08dac7c6",
        "filename": "control/json/triggers/timer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000029
      },
      "writtenOn": "2021-10-29T20:20:29Z",
      "side": 1,
      "message": "Yeah, I thought it would be a dangling reference also except after I read that a cref was copy constructable and went spiraling down that path but that would still leave a dangling reference since it\u0027d be a copy of a reference wrapper.",
      "parentUuid": "37e2e980_a23d751c",
      "range": {
        "startLine": 98,
        "startChar": 48,
        "endLine": 98,
        "endChar": 64
      },
      "revId": "87a4f2e53720a328bd103d7cb2c30b591d1ad698",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}