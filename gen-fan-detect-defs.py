#!/usr/bin/env python

"""
This script parses the given fan presence definition yaml file and generates
header file(s) based on the defined methods for determining when a fan is
present. The resulting files created are printed when the script exits.
"""

import os
import sys
import yaml
from argparse import ArgumentParser
# TODO Convert to using a mako template

def get_filename(detection_type):
    """
    Constructs and returns the fully qualified header filename from the given
    detection type.

    Parameter descriptions:
    detection_type      The defined type of fan presence detection
    """
    src_dir = os.path.dirname(os.path.abspath(__file__))
    # Replace all spaces with dashes
    detection_type = detection_type.replace(" ", "-")
    head_file = os.path.join(src_dir, detection_type)
    head_file = head_file + ".hpp"

    return head_file


def create_and_add_header(head_file):
    """
    Creates the header file based on the header filename value given within.
    The associated fan presence detection application includes this header.

    Parameter descriptions:
    head_file           Header filename to create
    """
    with open(head_file, 'w') as ofile:
        ofile.write("/* WARNING: This header contains code generated ")
        ofile.write("by " + __file__ + " */\n")
        ofile.write("/* !!! DO NOT EDIT THIS FILE BY HAND !!! */\n")
        ofile.write("#include <map>\n\n")
        ofile.write("static const std::map<std::string, ")
        ofile.write("std::map<std::string, ")
        ofile.write("std::string>>\nfanDetectionMap = {\n")


def add_fan(head_file, fan_info):
    """
    Adds each fan's yaml entry presence detection information to the
    corresponding header file for the defined detection method

    Parameter descriptions:
    head_file           Header file to add fan information to
    fan_info            Fan presence detection information
    """
    with open(head_file, 'a') as ofile:
        pres_dict = fan_info['Presence']
        for pres_rotors in fan_info['Presence']:
            ofile.write("    {\"" + pres_rotors['Rotor'] + "\",{\n")
            ofile.write("        {\"inventory\",\"" +
                        fan_info['Inventory'].lstrip("/").rstrip("/") +
                        "\"},\n")
            ofile.write("        {\"description\",\"" +
                        fan_info['Description'] + "\"},\n")
            ofile.write("    }},\n")


def add_closing(head_file):
    """
    Appends final closing tags to the header filename given. This essentially
    ends writing to the header file generated.

    Parameter descriptions:
    head_file           Header filename to add closing tags to
    """
    with open(head_file, 'a') as ofile:
        ofile.write("};\n")


def parse_yaml(yaml_file):
    """
    Parse the given yaml file, creating a header file for each 'Detection'
    types found to be included within the app supporting presence detection
    by that type.

    Parameter descriptions:
    yaml_file           File to be parsed for fan presences definitions
    """
    head_list = []
    makefile_array = []
    with open(yaml_file, 'r') as input_file:
        head_file = ""
        yaml_input = yaml.safe_load(input_file)
        for fan in yaml_input:
            head_file = get_filename(fan['Detection'])
            if head_file not in head_list:
                create_and_add_header(head_file)
                head_list += [head_file]
            add_fan(head_file, fan)
    for header in head_list:
        add_closing(header)
        print os.path.basename(header)


if __name__ == '__main__':
    parser = ArgumentParser()
    # Input yaml containing how each fan's presence detection should be done
    parser.add_argument("-y", "--yaml", dest="pres_yaml",
                        default=
                        "example/fan-detect.yaml",
                        help=
                        "Input fan presences definition yaml file to parse")
    args = parser.parse_args(sys.argv[1:])

    # Verify given yaml file exists
    yaml_file = os.path.abspath(args.pres_yaml)
    if not os.path.isfile(yaml_file):
        print "Unable to find input yaml file " + yaml_file
        exit(1)

    parse_yaml(yaml_file)
